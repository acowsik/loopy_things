# distutils: define_macros=NPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION
from typing import List
import numpy as np

class Ising:
    state: np.ndarray
    x_size: int
    y_size: int
    N: int
    beta: float

    def __init__(self, log_x_size: int, log_y_size: int, temperature: float) -> None: ...
        # Initialize the state with x_size 2**log_x_size and y_size 2**log_y_size and at the given temperature 
    def step(self) -> None: ...
        # does one potential spin flip 
    def sweep(self) -> None: ...
        # does N potential spin flips
    def magnetization(self) -> int: ...
        # calculates the sum of all the spins
    def wolff_sweep(self) -> int: ...
    def wolff_sweep_total(self) -> float: ...

class Stack:
    stack: np.ndarray
    stack_ptr: int
    stack_size: int
    def __init__(self, size: int) -> None: ...
    def push(self, x: int) -> None: ...
        # doesn't check if we buffer overrun because that's done automatically
    def pop(self) -> int: ...
        # again does not check if we buffer overrun
    
class RandomLongs:
    size: int
    array: np.ndarray
    maximum: int

    def __init__(self, size: int, maximum: int) -> None: ...
    def refresh(self) -> None: ...
    def next(self) -> int: ...

class RandomDoubles:
    size: int
    def __init__(self, size: int) -> None: ...
    def refresh(self) -> None: ...
    def next(self) -> float: ...